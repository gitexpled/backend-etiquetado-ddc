//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
// 
#pragma warning disable 1591

namespace rfcBaika.cl.ptichile.sistema_test {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WsPti_Binding", Namespace="urn:PtiChile")]
    public partial class WSDLService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback RecibeMasterOperationCompleted;
        
        private System.Threading.SendOrPostCallback AccesoSisOperationCompleted;
        
        private System.Threading.SendOrPostCallback CapturaLoteOperationCompleted;
        
        private System.Threading.SendOrPostCallback DefectosOperationCompleted;
        
        private System.Threading.SendOrPostCallback FirmezaOperationCompleted;
        
        private System.Threading.SendOrPostCallback ColorOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalibreOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WSDLService() {
            this.Url = global::rfcBaika.Properties.Settings.Default.rfcBaika_cl_ptichile_sistema_test_WSDLService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RecibeMasterCompletedEventHandler RecibeMasterCompleted;
        
        /// <remarks/>
        public event AccesoSisCompletedEventHandler AccesoSisCompleted;
        
        /// <remarks/>
        public event CapturaLoteCompletedEventHandler CapturaLoteCompleted;
        
        /// <remarks/>
        public event DefectosCompletedEventHandler DefectosCompleted;
        
        /// <remarks/>
        public event FirmezaCompletedEventHandler FirmezaCompleted;
        
        /// <remarks/>
        public event ColorCompletedEventHandler ColorCompleted;
        
        /// <remarks/>
        public event CalibreCompletedEventHandler CalibreCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:MasterAction", RequestNamespace="urn:Organization", ResponseNamespace="urn:Organization")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public string RecibeMaster(
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string Especie, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string Exportador, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string Partida, 
                    string Estado, 
                    string CodCentral, 
                    string CodProductor, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string NroGuiaDespacho, 
                    string FechaRecepcion, 
                    string FechaCosecha, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string CodVariedad, 
                    string EstibaCamion, 
                    string EsponjasCloradas, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string NroBandeja, 
                    [System.Xml.Serialization.SoapElementAttribute(DataType="time")] System.DateTime HoraLlegada, 
                    decimal KiloMuestra, 
                    decimal KiloNeto, 
                    decimal TempIngreso, 
                    decimal TempSalida, 
                    string Lote, 
                    string Huerto, 
                    string Hidro) {
            object[] results = this.Invoke("RecibeMaster", new object[] {
                        Especie,
                        Exportador,
                        Partida,
                        Estado,
                        CodCentral,
                        CodProductor,
                        NroGuiaDespacho,
                        FechaRecepcion,
                        FechaCosecha,
                        CodVariedad,
                        EstibaCamion,
                        EsponjasCloradas,
                        NroBandeja,
                        HoraLlegada,
                        KiloMuestra,
                        KiloNeto,
                        TempIngreso,
                        TempSalida,
                        Lote,
                        Huerto,
                        Hidro});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RecibeMasterAsync(
                    string Especie, 
                    string Exportador, 
                    string Partida, 
                    string Estado, 
                    string CodCentral, 
                    string CodProductor, 
                    string NroGuiaDespacho, 
                    string FechaRecepcion, 
                    string FechaCosecha, 
                    string CodVariedad, 
                    string EstibaCamion, 
                    string EsponjasCloradas, 
                    string NroBandeja, 
                    System.DateTime HoraLlegada, 
                    decimal KiloMuestra, 
                    decimal KiloNeto, 
                    decimal TempIngreso, 
                    decimal TempSalida, 
                    string Lote, 
                    string Huerto, 
                    string Hidro) {
            this.RecibeMasterAsync(Especie, Exportador, Partida, Estado, CodCentral, CodProductor, NroGuiaDespacho, FechaRecepcion, FechaCosecha, CodVariedad, EstibaCamion, EsponjasCloradas, NroBandeja, HoraLlegada, KiloMuestra, KiloNeto, TempIngreso, TempSalida, Lote, Huerto, Hidro, null);
        }
        
        /// <remarks/>
        public void RecibeMasterAsync(
                    string Especie, 
                    string Exportador, 
                    string Partida, 
                    string Estado, 
                    string CodCentral, 
                    string CodProductor, 
                    string NroGuiaDespacho, 
                    string FechaRecepcion, 
                    string FechaCosecha, 
                    string CodVariedad, 
                    string EstibaCamion, 
                    string EsponjasCloradas, 
                    string NroBandeja, 
                    System.DateTime HoraLlegada, 
                    decimal KiloMuestra, 
                    decimal KiloNeto, 
                    decimal TempIngreso, 
                    decimal TempSalida, 
                    string Lote, 
                    string Huerto, 
                    string Hidro, 
                    object userState) {
            if ((this.RecibeMasterOperationCompleted == null)) {
                this.RecibeMasterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecibeMasterOperationCompleted);
            }
            this.InvokeAsync("RecibeMaster", new object[] {
                        Especie,
                        Exportador,
                        Partida,
                        Estado,
                        CodCentral,
                        CodProductor,
                        NroGuiaDespacho,
                        FechaRecepcion,
                        FechaCosecha,
                        CodVariedad,
                        EstibaCamion,
                        EsponjasCloradas,
                        NroBandeja,
                        HoraLlegada,
                        KiloMuestra,
                        KiloNeto,
                        TempIngreso,
                        TempSalida,
                        Lote,
                        Huerto,
                        Hidro}, this.RecibeMasterOperationCompleted, userState);
        }
        
        private void OnRecibeMasterOperationCompleted(object arg) {
            if ((this.RecibeMasterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecibeMasterCompleted(this, new RecibeMasterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:MasterAction", RequestNamespace="urn:Organization", ResponseNamespace="urn:Organization")]
        [return: System.Xml.Serialization.SoapElementAttribute("Xml")]
        public string AccesoSis(string Usuario, string Contrasena) {
            object[] results = this.Invoke("AccesoSis", new object[] {
                        Usuario,
                        Contrasena});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AccesoSisAsync(string Usuario, string Contrasena) {
            this.AccesoSisAsync(Usuario, Contrasena, null);
        }
        
        /// <remarks/>
        public void AccesoSisAsync(string Usuario, string Contrasena, object userState) {
            if ((this.AccesoSisOperationCompleted == null)) {
                this.AccesoSisOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAccesoSisOperationCompleted);
            }
            this.InvokeAsync("AccesoSis", new object[] {
                        Usuario,
                        Contrasena}, this.AccesoSisOperationCompleted, userState);
        }
        
        private void OnAccesoSisOperationCompleted(object arg) {
            if ((this.AccesoSisCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AccesoSisCompleted(this, new AccesoSisCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:MasterAction", RequestNamespace="urn:Organization", ResponseNamespace="urn:Organization")]
        [return: System.Xml.Serialization.SoapElementAttribute("Xml")]
        public string CapturaLote([System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string idExportador, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string idEspecie, string idCentral, string Lote) {
            object[] results = this.Invoke("CapturaLote", new object[] {
                        idExportador,
                        idEspecie,
                        idCentral,
                        Lote});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CapturaLoteAsync(string idExportador, string idEspecie, string idCentral, string Lote) {
            this.CapturaLoteAsync(idExportador, idEspecie, idCentral, Lote, null);
        }
        
        /// <remarks/>
        public void CapturaLoteAsync(string idExportador, string idEspecie, string idCentral, string Lote, object userState) {
            if ((this.CapturaLoteOperationCompleted == null)) {
                this.CapturaLoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCapturaLoteOperationCompleted);
            }
            this.InvokeAsync("CapturaLote", new object[] {
                        idExportador,
                        idEspecie,
                        idCentral,
                        Lote}, this.CapturaLoteOperationCompleted, userState);
        }
        
        private void OnCapturaLoteOperationCompleted(object arg) {
            if ((this.CapturaLoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CapturaLoteCompleted(this, new CapturaLoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:MasterAction", RequestNamespace="urn:Organization", ResponseNamespace="urn:Organization")]
        [return: System.Xml.Serialization.SoapElementAttribute("Xml")]
        public string Defectos([System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string idExportador, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string idEspecie) {
            object[] results = this.Invoke("Defectos", new object[] {
                        idExportador,
                        idEspecie});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DefectosAsync(string idExportador, string idEspecie) {
            this.DefectosAsync(idExportador, idEspecie, null);
        }
        
        /// <remarks/>
        public void DefectosAsync(string idExportador, string idEspecie, object userState) {
            if ((this.DefectosOperationCompleted == null)) {
                this.DefectosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDefectosOperationCompleted);
            }
            this.InvokeAsync("Defectos", new object[] {
                        idExportador,
                        idEspecie}, this.DefectosOperationCompleted, userState);
        }
        
        private void OnDefectosOperationCompleted(object arg) {
            if ((this.DefectosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DefectosCompleted(this, new DefectosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:MasterAction", RequestNamespace="urn:Organization", ResponseNamespace="urn:Organization")]
        [return: System.Xml.Serialization.SoapElementAttribute("Xml")]
        public string Firmeza([System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string idExportador, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string idEspecie) {
            object[] results = this.Invoke("Firmeza", new object[] {
                        idExportador,
                        idEspecie});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FirmezaAsync(string idExportador, string idEspecie) {
            this.FirmezaAsync(idExportador, idEspecie, null);
        }
        
        /// <remarks/>
        public void FirmezaAsync(string idExportador, string idEspecie, object userState) {
            if ((this.FirmezaOperationCompleted == null)) {
                this.FirmezaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFirmezaOperationCompleted);
            }
            this.InvokeAsync("Firmeza", new object[] {
                        idExportador,
                        idEspecie}, this.FirmezaOperationCompleted, userState);
        }
        
        private void OnFirmezaOperationCompleted(object arg) {
            if ((this.FirmezaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FirmezaCompleted(this, new FirmezaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:MasterAction", RequestNamespace="urn:Organization", ResponseNamespace="urn:Organization")]
        [return: System.Xml.Serialization.SoapElementAttribute("Xml")]
        public string Color([System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string idExportador, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string idEspecie) {
            object[] results = this.Invoke("Color", new object[] {
                        idExportador,
                        idEspecie});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ColorAsync(string idExportador, string idEspecie) {
            this.ColorAsync(idExportador, idEspecie, null);
        }
        
        /// <remarks/>
        public void ColorAsync(string idExportador, string idEspecie, object userState) {
            if ((this.ColorOperationCompleted == null)) {
                this.ColorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnColorOperationCompleted);
            }
            this.InvokeAsync("Color", new object[] {
                        idExportador,
                        idEspecie}, this.ColorOperationCompleted, userState);
        }
        
        private void OnColorOperationCompleted(object arg) {
            if ((this.ColorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ColorCompleted(this, new ColorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:MasterAction", RequestNamespace="urn:Organization", ResponseNamespace="urn:Organization")]
        [return: System.Xml.Serialization.SoapElementAttribute("Xml")]
        public string Calibre([System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string idExportador, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string idEspecie) {
            object[] results = this.Invoke("Calibre", new object[] {
                        idExportador,
                        idEspecie});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CalibreAsync(string idExportador, string idEspecie) {
            this.CalibreAsync(idExportador, idEspecie, null);
        }
        
        /// <remarks/>
        public void CalibreAsync(string idExportador, string idEspecie, object userState) {
            if ((this.CalibreOperationCompleted == null)) {
                this.CalibreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalibreOperationCompleted);
            }
            this.InvokeAsync("Calibre", new object[] {
                        idExportador,
                        idEspecie}, this.CalibreOperationCompleted, userState);
        }
        
        private void OnCalibreOperationCompleted(object arg) {
            if ((this.CalibreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalibreCompleted(this, new CalibreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void RecibeMasterCompletedEventHandler(object sender, RecibeMasterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecibeMasterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecibeMasterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void AccesoSisCompletedEventHandler(object sender, AccesoSisCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AccesoSisCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AccesoSisCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void CapturaLoteCompletedEventHandler(object sender, CapturaLoteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CapturaLoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CapturaLoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void DefectosCompletedEventHandler(object sender, DefectosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DefectosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DefectosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void FirmezaCompletedEventHandler(object sender, FirmezaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FirmezaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FirmezaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void ColorCompletedEventHandler(object sender, ColorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ColorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ColorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void CalibreCompletedEventHandler(object sender, CalibreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalibreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalibreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591